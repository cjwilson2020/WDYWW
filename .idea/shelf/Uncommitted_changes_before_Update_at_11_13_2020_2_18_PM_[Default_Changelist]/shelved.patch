Index: app/src/test/java/com/example/whatdoyouwannawatch/ExampleUnitTest.java
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/ExampleUnitTest.java	(revision 77e74cc1e468dd011139a28173202a514e539f43)
+++ app/src/test/java/com/example/whatdoyouwannawatch/ExampleUnitTest.java	(revision 77e74cc1e468dd011139a28173202a514e539f43)
@@ -1,17 +0,0 @@
-package com.example.whatdoyouwannawatch;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java	(date 1605298260153)
+++ app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java	(date 1605298260153)
@@ -0,0 +1,172 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class BackStageUnitTest {
+
+    @Test
+    public void TestCalcLength() {
+        Theatre t1 = new Theatre("123");
+        //BackStage b1 = t1.getBackstage();
+        BackStage b1 = new BackStage(t1);
+
+        User u1= new User("1","1", "1");
+        int u1t1 = 55;
+        int u1t2 = 2;
+        u1.setMinLength(u1t1);
+        u1.setMaxLength(u1t2);
+
+        User u2= new User("2","2","2");
+        int u2t1 = 50;
+        int u2t2 = 121;
+        u2.setMinLength(u2t1);
+        u2.setMaxLength(u2t2);
+
+        List<User> users = new ArrayList<User>();
+        users.add(u1);
+        users.add(u2);
+
+        t1.setUsers(users);
+
+        b1.calcLength();
+        assertEquals(u1t1, t1.getMinTime());
+        assertEquals(u2t2, t1.getMaxTime());
+
+    }
+
+    @Test
+    public void TestCalcGenre() {
+        Theatre t1 = new Theatre("123");
+        BackStage b1 = new BackStage(t1);
+        User u1= new User("1","1", "1");
+        u1.addGenres("Horror");
+        u1.addGenres("Fantasy");
+        u1.addGenres("Drama");
+
+        User u2= new User("2","2","2");
+        u2.addGenres("Horror");
+        u2.addGenres("Comedy");
+
+        User u3= new User("3","3","3");
+        u3.addGenres("Horror");
+        u3.addGenres("Foreign");
+        u3.addGenres("Drama");
+
+        t1.addUser(u1);
+        t1.addUser(u2);
+        t1.addUser(u3);
+
+        b1.calcGenre();
+
+        assertEquals("First choice","Horror", t1.getGenres().get(0));
+        assertEquals("Second choice","Drama", t1.getGenres().get(1));
+
+    }
+
+    @Test
+    public void TestCalcResultMultiUser() {
+        Theatre t1 = new Theatre("123");
+        //BackStage b1 = t1.getBackstage();
+        BackStage b1 = new BackStage(t1);
+
+        Media a = new Media("A");
+        Media b = new Media("B");
+        Media c = new Media("C");
+        Media d = new Media("D");
+        Media e = new Media( "E");
+
+        User u1= new User("1","1", "1");
+        User u2= new User("2","2","2");
+        User u3= new User("3","3","3");
+        User u4 = new User("4", "4","4");
+        User u5 = new User("5", "5","5");
+
+        t1.addUser(u1);
+        t1.addUser(u2);
+        t1.addUser(u3);
+        t1.addUser(u4);
+        t1.addUser(u5);
+
+        u1.addRankingToEnd(a);
+        u1.addRankingToEnd(b);
+        u1.addRankingToEnd(c);
+        u1.addRankingToEnd(d);
+        u1.addRankingToEnd(e);
+
+        u2.addRankingToEnd(c);
+        u2.addRankingToEnd(d);
+        u2.addRankingToEnd(e);
+        u2.addRankingToEnd(b);
+        u2.addRankingToEnd(a);
+
+        u3.addRankingToEnd(b);
+        u3.addRankingToEnd(c);
+        u3.addRankingToEnd(e);
+        u3.addRankingToEnd(a);
+        u3.addRankingToEnd(d);
+
+        u4.addRankingToEnd(b);
+        u4.addRankingToEnd(e);
+        u4.addRankingToEnd(c);
+        u4.addRankingToEnd(d);
+        u4.addRankingToEnd(a);
+
+        u5.addRankingToEnd(a);
+        u5.addRankingToEnd(c);
+        u5.addRankingToEnd(b);
+        u5.addRankingToEnd(e);
+        u5.addRankingToEnd(d);
+
+        List<Media> choices = new ArrayList<>();
+        choices.add(a);
+        choices.add(b);
+        choices.add(c);
+        choices.add(d);
+        choices.add(e);
+
+        b1.calcResult(choices);
+
+        assertEquals("Media Result", b.getId(), t1.getResult().getFinalDecision().getId());
+
+    }
+
+    @Test
+    public void TestCalcResultSingleUser() {
+        Theatre t2 = new Theatre("1234");
+        //BackStage b1 = t1.getBackstage();
+        BackStage b1 = new BackStage(t2);
+
+        Media a = new Media("A");
+        Media b = new Media("B");
+        Media c = new Media("C");
+        Media d = new Media("D");
+        Media e = new Media( "E");
+
+        User u1= new User("1","1", "1");
+
+        t2.addUser(u1);
+
+        u1.addRankingToEnd(c);
+        u1.addRankingToEnd(b);
+        u1.addRankingToEnd(a);
+        u1.addRankingToEnd(d);
+        u1.addRankingToEnd(e);
+
+        List<Media> choices = new ArrayList<>();
+        choices.add(a);
+        choices.add(b);
+        choices.add(c);
+        choices.add(d);
+        choices.add(e);
+
+        b1.calcResult(choices);
+
+        assertEquals("Media Result", c.getId(), t2.getResult().getFinalDecision().getId());
+
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/InputValidatorUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/InputValidatorUnitTest.java	(date 1605298260149)
+++ app/src/test/java/com/example/whatdoyouwannawatch/InputValidatorUnitTest.java	(date 1605298260149)
@@ -0,0 +1,50 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+
+/**
+ * This is a unit test for InputValidator class
+ */
+public class InputValidatorUnitTest {
+    InputValidator iv;
+
+    @Before
+    public void setup(){
+        iv = new InputValidator();
+    }
+
+    @Test
+    public void TestPasswordIsValid() {
+        String pw1 = "";
+        String pw2 = "somepw";
+        String pw3 = "somereallylongpassword32167";
+        assertTrue(!iv.passwordIsValid(pw1));
+        assertTrue(iv.passwordIsValid(pw2));
+        assertTrue(iv.passwordIsValid(pw3));
+    }
+
+    @Test
+    public void emailIsValid() {
+        String e1 = "";
+        String e2 = "someone@somesite";
+        String e3 = "avalidemail@some.com";
+        assertTrue(!iv.emailIsValid(e1));
+        assertTrue(!iv.emailIsValid(e2));
+        assertTrue(iv.emailIsValid(e3));
+    }
+
+    @Test
+    public void usernameIsValid() {
+        String un1 = "";
+        String un2 = "short";
+        String un3 = "CAP";
+        String un4 = "Some quite long username, what do you think";
+        assertTrue(!iv.usernameIsValid(un1));
+        assertTrue(iv.usernameIsValid(un2));
+        assertTrue(iv.usernameIsValid(un3));
+        assertTrue(iv.usernameIsValid(un4));
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java	(date 1605298260126)
+++ app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java	(date 1605298260126)
@@ -0,0 +1,206 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class UserUnitTest {
+    User guest1 = new User();
+    User user1 = new User("some random email address", "some random username", "some random uid");
+
+    @Before
+    public void start() throws Exception {
+        guest1.addGenres("SciFi");
+        guest1.addGenres("Romance");
+        user1.addGenres("Horror");
+        user1.addGenres("Unknown");
+        user1.addGenres("111");
+        user1.addRankingToEnd(new Media("11"));
+        user1.addRankingToEnd(new Media("22"));
+        user1.addRankingToEnd(new Media("33"));
+        user1.addPreference("Horror");
+        user1.addPreference("SciFi");
+        user1.addFriend(new User("1", "user1", "1"));
+        user1.addFriend(new User("2", "user2", "2"));
+        user1.addFriend(new User("3", "user3", "3"));
+        user1.addHistory(new Result());
+    }
+
+    //test basic information
+    @Test
+    public void GuestIsGuest() {
+        assertTrue(guest1.isGuest());
+    }
+
+    @Test
+    public void userIsNotGuest() {
+        assertTrue(!user1.isGuest());
+    }
+
+    @Test
+    public void getUID() {
+        assertEquals("user id", user1.getUID(), "some random uid");
+    }
+
+    @Test
+    public void getUsername() {
+        assertEquals("user name", user1.getUsername(), "some random username");
+    }
+
+    @Test
+    public void setUsername() {
+        user1.setUsername("yc520");
+        assertEquals("user name", user1.getUsername(), "yc520");
+    }
+
+    @Test
+    public void getEmail() {
+        assertEquals("user email", user1.getEmail(), "some random email address");
+    }
+
+    @Test
+    public void setEmail() {
+        user1.setEmail("chenyuan@gmail.com");
+        assertEquals("user email", user1.getEmail(), "chenyuan@gmail.com");
+    }
+
+//    @Test
+//    public void setUserAvatar() {
+//        user1.setUserAvatar();
+//    }
+
+    //test preference settings
+    @Test
+    public void guestGetGenres() {
+        assertEquals(guest1.getGenres().get(1), "Romance");
+    }
+
+    @Test
+    public void userGetGenres() {
+        assertEquals(user1.getGenres().get(2), "111");
+    }
+
+    @Test
+    public void guestAddGenres() {
+        guest1.addGenres("222");
+        assertEquals("Genres", guest1.getGenres().get(2), "222");
+    }
+
+
+    @Test
+    public void userAddGenres() {
+        user1.addGenres("SciFi");
+        assertEquals("Genres", user1.getGenres().get(3), "SciFi");
+    }
+
+    @Test
+    public void guestRemoveGenres() {
+        guest1.removeGenres("SciFi");
+        assertEquals("Genres", guest1.getGenres().get(0), "Romance");
+    }
+
+    @Test
+    public void userRemoveGenres() {
+        user1.removeGenres("Horror");
+        assertEquals("Genres", user1.getGenres().get(0), "Unknown");
+    }
+
+
+
+    @Test
+    public void setOptions() {
+        List<Media> options = new ArrayList<>();
+        options.add(new Media("11"));
+        options.add(new Media("22"));
+        options.add(new Media("33"));
+        user1.setOptions(options);
+        assertEquals(user1.optionSize(), 3);
+    }
+
+    @Test
+    public void addRankingToEnd() {
+        user1.addRankingToEnd(new Media("44"));
+        assertEquals(user1.rankingsSize(), 4);
+    }
+
+//    @Test
+//    public void removeRanking() {
+//        user1.removeRanking();
+//        assertEquals(user1.rankingsSize(), 2);
+//    }
+
+    @Test
+    public void clearRanking() {
+        user1.clearRanking();
+        assertEquals(user1.rankingsSize(), 0);
+    }
+
+    @Test
+    public void getRankings() {
+        List<Media> testList = user1.getRankings();
+        assertEquals(testList.size(), 3);
+    }
+
+    @Test
+    public void getPreferences() {
+        assertEquals(user1.getPreferences().size(), 2);
+    }
+
+    @Test
+    public void addPreference() {
+        user1.addPreference("Nothing");
+        assertEquals(user1.getPreferences().get(2), "Nothing");
+    }
+
+    @Test
+    public void removePreference() {
+        user1.removePreference("Horror");
+        assertEquals(user1.getPreferences().get(0), "SciFi");
+    }
+
+
+    //test friend
+    @Test
+    public void getFriends() {
+        assertEquals(user1.getFriends().get(0).getUsername(), "user1");
+    }
+
+    @Test
+    public void addFriend() {
+        user1.addFriend(new User("22", "test user", "123"));
+        assertEquals(user1.getFriends().get(3).getUsername(), "test user");
+    }
+
+    @Test
+    public void removeFriend() {
+        user1.removeFriend(user1.getFriends().get(0));
+        assertEquals(user1.getFriends().get(0).getUsername(), "user2");
+    }
+
+    @Test
+    public void getHistory() {
+    }
+
+    @Test
+    public void addHistory() {
+        user1.addHistory(new Result());
+        assertEquals(user1.getHistory().size(), 2);
+    }
+
+    @Test
+    public void removeHistory() {
+        user1.removeHistory(user1.getHistory().get(0));
+        assertEquals(user1.getHistory().size(), 0);
+    }
+
+    @Test
+    public void clearHistory() {
+        user1.clearHistory();
+        assertEquals(user1.getHistory().size(), 0);
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/MainActivityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/MainActivityTest.java	(date 1605298260146)
+++ app/src/test/java/com/example/whatdoyouwannawatch/MainActivityTest.java	(date 1605298260146)
@@ -0,0 +1,38 @@
+package com.example.whatdoyouwannawatch;
+
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+
+import org.junit.Test;
+
+import java.util.HashMap;
+
+public class MainActivityTest {
+    public static FirebaseDatabase database = FirebaseDatabase.getInstance();
+    public static DatabaseReference myRef = database.getReference("users");
+
+    @Test
+    public void pushData() {
+        User user = new User("ted123@gmail.com","ted123", "lhsdfiwer9uiruiry78rufh");
+        HashMap<String, Object> map = new HashMap<>();
+        String folder = "/users/" + user.getUID();
+        map.put(folder, user);
+        myRef.updateChildren(map)
+                .addOnFailureListener(new OnFailureListener() {
+                    @Override
+                    public void onFailure(@NonNull Exception e) {
+                        Log.w("pushData", "Error Adding User", e);
+                    }
+                });
+    }
+
+    @Test
+    public void pullData() {
+
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/MediaUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/MediaUnitTest.java	(date 1605298260139)
+++ app/src/test/java/com/example/whatdoyouwannawatch/MediaUnitTest.java	(date 1605298260139)
@@ -0,0 +1,129 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class MediaUnitTest {
+
+    Media m;
+    String id;
+    String title;
+    ArrayList<String> genres;
+    ArrayList<String> cast;
+    List<User> currentVoters;
+    User u1;
+    User u2;
+    User u3;
+    int length;
+    String director;
+    String writer;
+    String description;
+    URL poster;
+    Double rating;
+
+    @Before
+    public void setUp() throws Exception {
+        id = "000";
+        title = "some movie";
+        genres = new ArrayList<>();
+        genres.add("g1");
+        genres.add("g2");
+        genres.add("g3");
+        length = 120;
+        cast = new ArrayList<>();
+        cast.add("sb1");
+        cast.add("sb2");
+        cast.add("sb3");
+        writer = "sb00";
+        director = "sb11";
+        description = "bad movie";
+        rating = 1.0;
+        m = new Media(id, title, genres, cast, length, director, writer, description, poster, rating);
+        currentVoters = new ArrayList<>();
+        currentVoters.add(u1);
+        currentVoters.add(u2);
+        m.setCurrentVoters(currentVoters);
+
+    }
+
+    @Test
+    public void TestSetGetID() {
+        assertEquals(m.getId(), "000");
+        m.setId("110");
+        assertEquals(m.getId(), "110");
+    }
+
+    @Test
+    public void TestSetGetTitle() {
+        assertEquals(m.getTitle(), "some movie");
+        m.setTitle("another movie");
+        assertEquals(m.getTitle(), "another movie");
+    }
+
+    @Test
+    public void TestGetGenres() {
+        assertEquals(m.getGenres().get(0), "g1");
+        assertEquals(m.getGenres().get(1), "g2");
+        assertEquals(m.getGenres().get(2), "g3");
+    }
+
+    @Test
+    public void TestGetCast() {
+        assertEquals(m.getCast().get(0), "sb1");
+        assertEquals(m.getCast().get(1), "sb2");
+        assertEquals(m.getCast().get(2), "sb3");
+    }
+
+    @Test
+    public void TestGetLength() {
+        assertEquals(m.getLength(), 120);
+        m.setLength(150);
+        assertEquals(m.getLength(), 150);
+        m.setLength(-150);
+        assertEquals(m.getLength(), -150);//TODO make sure the app only accept legit input, no negative number for time
+    }
+
+    @Test
+    public void TestSetGetWriter() {
+        assertEquals(m.getWriter(), "sb00");
+        m.setWriter("sb00a");
+        assertEquals(m.getWriter(), "sb00a");
+    }
+
+    @Test
+    public void TestSetGetDirector() {
+        assertEquals(m.getDirector(), "sb11");
+        m.setDirector("sb11a");
+        assertEquals(m.getDirector(), "sb11a");
+    }
+
+    @Test
+    public void TestSetGetDes() {
+        assertEquals(m.getDescription(), "bad movie");
+        m.setDescription("good now");
+        assertEquals(m.getDescription(), "good now");
+    }
+
+    @Test
+    public void TestSetGetRate() {
+        assertEquals(m.getRating(), 1.0, 0.0001);
+        m.setRating(5.0);
+        assertEquals(m.getRating(), 5.0, 0.0001);
+    }
+
+    @Test
+    public void TestCurrentVoter() {
+        assertEquals(m.getCurrentVoters().size(), 2);
+        assertEquals(m.getCurrentVoters().get(0), u1);
+        assertEquals(m.getCurrentVoters().get(1), u2);
+        m.getCurrentVoters().add(u3);
+        assertEquals(m.getCurrentVoters().size(), 3);
+        assertEquals(m.getCurrentVoters().get(2), u3);
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/ResultUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/ResultUnitTest.java	(date 1605298260135)
+++ app/src/test/java/com/example/whatdoyouwannawatch/ResultUnitTest.java	(date 1605298260135)
@@ -0,0 +1,74 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class ResultUnitTest {
+    List<User> userList;
+    List<Media> options;
+    Date date;
+    Result test;
+    User user1;
+    User user2;
+    User user3;
+    Media m1;
+    Media m2;
+    Media m3;
+    Media m4;
+
+
+    @Before
+    public void setup(){
+        user1 = new User("1","1","1");
+        user2 = new User("2","2","2");
+        user3 = new User("3","3","3");
+        m1 = new Media("11");
+        m2 = new Media("22");
+        m3 = new Media("33");
+        m4 = new Media("44");
+        userList = new ArrayList<>();
+        userList.add(user1);
+        userList.add(user2);
+        userList.add(user3);
+        options = new ArrayList<>();
+        options.add(m1);
+        options.add(m2);
+        options.add(m3);
+        options.add(m4);
+        test = new Result(m3, userList, options, date);
+    }
+
+    @Test
+    public void TestGetDecision() {
+        assertEquals(test.getFinalDecision(), m3);
+    }
+
+    @Test
+    public void TestGetUsers() {
+        assertEquals(test.getUsers().get(0), user1);
+        assertEquals(test.getUsers().get(1), user2);
+        assertEquals(test.getUsers().get(2), user3);
+    }
+
+    @Test
+    public void TestGetOptions() {
+        assertEquals(test.getOptions().get(0), m1);
+        assertEquals(test.getOptions().get(1), m2);
+        assertEquals(test.getOptions().get(2), m3);
+        assertEquals(test.getOptions().get(3), m4);
+    }
+
+    @Test
+    public void addToHistory() {
+        test.addToHistory(userList);
+        assertEquals(userList.get(0).getHistory().get(0), test);
+        assertEquals(userList.get(1).getHistory().get(0), test);
+        assertEquals(userList.get(2).getHistory().get(0), test);
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java	(date 1605298260130)
+++ app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java	(date 1605298260130)
@@ -0,0 +1,132 @@
+package com.example.whatdoyouwannawatch;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class TheatreUnitTest {
+    List<User> userList;
+    List<Media> options;
+    List<String> genres;
+    Date date;
+    Result result;
+    Theatre t;
+    User user1;
+    User user2;
+    User user3;
+    Media m1;
+    Media m2;
+    Media m3;
+    Media m4;
+    Media m5;
+    String g1;
+    String g2;
+    String g3;
+
+    @Before
+    public void setUp() {
+        user1 = new User("1","1","1");
+        user2 = new User("2","2","2");
+        user3 = new User("3","3","3");
+        userList = new ArrayList<>();
+        userList.add(user1);
+        userList.add(user2);
+        userList.add(user3);
+        m1 = new Media("11");
+        m2 = new Media("22");
+        m3 = new Media("33");
+        m4 = new Media("44");
+        m5 = new Media("55");
+        options = new ArrayList<>();
+        options.add(m1);
+        options.add(m2);
+        options.add(m3);
+        options.add(m4);
+        options.add(m5);
+        genres = new ArrayList<>();
+        genres.add(g1);
+        genres.add(g2);
+        genres.add(g3);
+        t = new Theatre("123");
+        result = new Result();
+    }
+
+    @Test
+    public void TestGetUID() {
+        assertEquals(t.getHostID(), "123");
+    }
+
+    @Test
+    public void TestSetGetUsers() {
+        t.setUsers(userList);
+        assertEquals(t.getUsers().get(0), user1);
+        assertEquals(t.getUsers().get(1), user2);
+        assertEquals(t.getUsers().get(2), user3);
+    }
+
+    @Test
+    public void TestSetGetOptions() {
+        t.setOptions(options);
+        assertEquals(t.getOptions().get(0), m1);
+        assertEquals(t.getOptions().get(1), m2);
+        assertEquals(t.getOptions().get(2), m3);
+        assertEquals(t.getOptions().get(3), m4);
+        assertEquals(t.getOptions().get(4), m5);
+    }
+
+    @Test
+    public void TestSetGetGenres() {
+        t.setGenres(genres);
+        assertEquals(t.getGenres().get(0), g1);
+        assertEquals(t.getGenres().get(1), g2);
+        assertEquals(t.getGenres().get(2), g3);
+    }
+
+    @Test
+    public void TestSetGetResult() {
+        t.setResult(result);
+        assertEquals(t.getResult(), result);
+    }
+
+    @Test
+    public void TestSetGetMinTime() {
+        t.setMinTime(0);
+        assertEquals(t.getMinTime(), 0);
+        t.setMinTime(-1000);
+        assertEquals(t.getMinTime(), -1000);
+        t.setMinTime(1000);
+        assertEquals(t.getMinTime(), 1000);
+    }
+
+    @Test
+    public void TestSetGetMaxTime() {
+        t.setMaxTime(0);
+        assertEquals(t.getMaxTime(), 0);
+        t.setMaxTime(10000);
+        assertEquals(t.getMaxTime(), 10000);
+        t.setMaxTime(-10000);
+        assertEquals(t.getMaxTime(), -10000);
+    }
+
+    @Test
+    public void TestAddUser() {
+        t.setUsers(userList);
+        User u4 = new User();
+        t.addUser(user3);
+        t.addUser(u4);
+        assertEquals(t.getUsers().get(2), user3);
+        assertEquals(t.getUsers().get(3), u4);
+    }
+
+    @Test
+    public void TestRemoveUser() {
+        t.setUsers(userList);
+        t.removeUser(user1.getUsername());
+        assertEquals(t.getUsers().get(0), user2);
+    }
+}
\ No newline at end of file
