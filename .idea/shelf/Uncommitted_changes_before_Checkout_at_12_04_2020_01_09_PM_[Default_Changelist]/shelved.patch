Index: app/src/main/java/com/example/whatdoyouwannawatch/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.whatdoyouwannawatch;\r\n\r\nimport android.content.Intent;\r\nimport android.media.Image;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.*;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.auth.UserProfileChangeRequest;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport okhttp3.Call;\r\nimport okhttp3.Callback;\r\nimport okhttp3.Headers;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.Response;\r\nimport okhttp3.ResponseBody;\r\n\r\npublic class\r\nMainActivity extends AppCompatActivity {\r\n    // Write info to the Realtime database\r\n    private static final String TAG = \"MainActivity\";\r\n    public static FirebaseDatabase database = FirebaseDatabase.getInstance();\r\n    public static DatabaseReference myRef = database.getReference();\r\n    public static final MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\r\n    private FirebaseAuth mAuth;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mAuth = FirebaseAuth.getInstance();\r\n    }\r\n\r\n    static void removeUserFromTheatre(String hostID, final String username) {\r\n        myRef = database.getReference();\r\n        pullData('t', hostID, new DataCallback() {\r\n            @Override\r\n            public void onCallback(Object obj) {\r\n                if (obj != null) {\r\n                    Theatre t = (Theatre) obj;\r\n                    t.removeUser(username);\r\n                    pushData(t);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static void removeTheatre(String hostID) {\r\n        myRef = database.getReference();\r\n        DatabaseReference tRef = myRef.child(\"theatres\").child(hostID);\r\n        tRef.removeValue();\r\n    }\r\n\r\n    static void pushData(Object obj) {\r\n        // A HashMap is used to upload information to firebase, the String is the location in\r\n        // firebase and the Object is the Object to be put in firebase\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        myRef = database.getReference();\r\n        if (obj.getClass().getName().equals(\"com.example.whatdoyouwannawatch.User\")) {\r\n            User tmp = (User) obj;\r\n            String u = \"users\";\r\n\r\n            String folder = u + \"/\" + (tmp).getUsername();\r\n            map.put(folder.toLowerCase(), obj);\r\n        } else if (obj.getClass().getName().equals(\"com.example.whatdoyouwannawatch.Theatre\")) {\r\n            Theatre tmp = (Theatre) obj;\r\n            String t = \"theatres\";\r\n\r\n            String folder = t + \"/\" + (tmp).getHostID();\r\n            map.put(folder.toLowerCase(), obj);\r\n        }\r\n        myRef.updateChildren(map)\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(\"pushData\", \"Error Adding User/Theatre\", e);\r\n                    }\r\n                })\r\n                .addOnSuccessListener(new OnSuccessListener() {\r\n                    @Override\r\n                    public void onSuccess(Object o) {\r\n                        Log.d(\"pushData\", \"Successfully added user to firebase\");\r\n                    }\r\n                });\r\n    }\r\n    public static Object data = null;\r\n    static Object pullData(char type, String id, final DataCallback dcb) {\r\n        String t = \"theatres\";\r\n        String u = \"users\";\r\n        id = id.toLowerCase().trim();\r\n\r\n        if (type == 'u') {\r\n            myRef = database.getReference().child(u).child(id);\r\n            Log.d(\"pull\", myRef.toString());\r\n\r\n            ValueEventListener userListener = new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(DataSnapshot dataSnapshot) {\r\n                    User user = dataSnapshot.getValue(User.class);\r\n                    if (user == null) {\r\n                        dcb.onCallback(null);\r\n                    } else {\r\n                        if (user.getUID() == null) {\r\n                            dcb.onCallback(null);\r\n                        } else {\r\n                            MainActivity.data = user;\r\n                            dcb.onCallback(user);\r\n                        }\r\n                    }\r\n                }\r\n                @Override\r\n                public void onCancelled(DatabaseError databaseError) {\r\n                    // Getting User failed, log a message\r\n                    Log.i(\"PullData\", \"Failed to Load User from Firebase\", databaseError.toException());\r\n                }\r\n            };\r\n\r\n            myRef.addListenerForSingleValueEvent(userListener);\r\n            myRef.removeEventListener(userListener);\r\n        } else if (type == 't') {\r\n            myRef = database.getReference().child(t).child(id);\r\n            Log.d(\"pull\", myRef.toString());\r\n\r\n            ValueEventListener theatreListener = new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(DataSnapshot dataSnapshot) {\r\n                    Theatre theatre = dataSnapshot.getValue(Theatre.class);\r\n                    if (theatre == null) {\r\n                        dcb.onCallback(null);\r\n                    } else {\r\n                        if (theatre.getHostID() == null) {\r\n                            dcb.onCallback(null);\r\n                        } else {\r\n                            MainActivity.data = theatre;\r\n                            dcb.onCallback(theatre);\r\n                        }\r\n                    }\r\n                }\r\n                @Override\r\n                public void onCancelled(DatabaseError databaseError) {\r\n                    // Getting User failed, log a message\r\n                    Log.i(\"PullData\", \"Failed to Load User from Firebase\", databaseError.toException());\r\n                }\r\n            };\r\n\r\n            myRef.addListenerForSingleValueEvent(theatreListener);\r\n            myRef.removeEventListener(theatreListener);\r\n        }\r\n        if (data != null){\r\n            return (Object)data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static void deleteData(Object obj){\r\n        // A HashMap is used to upload information to firebase, the String is the location in\r\n        // firebase and the Object is the Object to be put in firebase\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        myRef = database.getReference();\r\n        if (obj.getClass().getName().equals(\"com.example.whatdoyouwannawatch.User\")) {\r\n            User tmp = (User) obj;\r\n            String u = \"users\";\r\n\r\n            String folder = u + \"/\" + (tmp).getUsername();\r\n            map.put(folder.toLowerCase(), null);\r\n        } else if (obj.getClass().getName().equals(\"com.example.whatdoyouwannawatch.Theatre\")) {\r\n            Theatre tmp = (Theatre) obj;\r\n            String t = \"theatres\";\r\n\r\n            String folder = t + \"/\" + (tmp).getHostID();\r\n            map.put(folder.toLowerCase(), null);\r\n        }\r\n        myRef.updateChildren(map)\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(\"delete\", \"Error deleting User/Theatre\", e);\r\n                    }\r\n                })\r\n                .addOnSuccessListener(new OnSuccessListener() {\r\n                    @Override\r\n                    public void onSuccess(Object o) {\r\n                        Log.d(\"delete\", \"Successfully deleted from firebase\");\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void onClickLogIn(View v) {\r\n        Intent intent = new Intent(MainActivity.this, LoginActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public void onClickSignUp(View v) {\r\n        Intent intent = new Intent(MainActivity.this, SignUpActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public void onClickContinueAsGuest(View v) {\r\n        // create anonymous user\r\n        mAuth.signInAnonymously()\r\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (task.isSuccessful()) {\r\n                            FirebaseUser user = mAuth.getCurrentUser();\r\n                            setGuestUsername(user, \"Guest \" + user.getUid());\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void setGuestUsername(final FirebaseUser user, String username) {\r\n        UserProfileChangeRequest userProfileChangeRequest = new UserProfileChangeRequest.Builder()\r\n                .setDisplayName(username)\r\n                .build();\r\n        user.updateProfile(userProfileChangeRequest)\r\n                .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<Void> task) {\r\n                        if (task.isSuccessful()) {\r\n                            MainActivity.pullData( 'u', user.getDisplayName(), new DataCallback() {\r\n                                @Override\r\n                                public void onCallback(Object usr) {\r\n                                    if(usr== null){\r\n                                        User newUser = new User(user.getDisplayName());\r\n                                        MainActivity.pushData(newUser);\r\n                                    }\r\n                                }\r\n                            });\r\n                            Intent intent = new Intent(MainActivity.this, JoinTheatre.class);\r\n                            startActivity(intent);\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    // This is a method to asynchronously call our API, Entertainment Data Hub on RapidAPI,\r\n    // https://rapidapi.com/IVALLC/api/entertainment-data-hub and wait for a response\r\n    // To implement this method, I need to use a callback function\r\n    public static void apiCallSearch(String progTypes, String genres, String providers, final ApiCallback acb) throws IOException {\r\n\r\n        OkHttpClient client = new OkHttpClient(); //A client for networking with the Api online\r\n        //Log.d(\"search\", \"Title: \" + title );\r\n        genres = genres.replaceAll(\"\\\\s+\", \"\");\r\n        providers = providers.replaceAll(\"\\\\s+\", \"\");\r\n\r\n\r\n        Log.d(\"search\", \"genres: \" + genres);\r\n        Log.d(\"search\", \"providers: \" + providers);\r\n        Log.d(\"search\", \"progTypes: \" + progTypes);\r\n        /*\r\n            .url(\"https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/entertainment/\r\n            search/?\r\n            Genres=Crime%2CDrama&\r\n            SortBy=Relevance&\r\n            Includes=Images%2CGenres%2CDescriptions&\r\n            ProgramTypes=Movie%2CShow&\r\n            Providers=AmazonPrimeVideo%2c\r\n            \")\r\n        */\r\n\r\n        String address = \"https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/entertainment/search/?\";\r\n\r\n        String gl[] = genres.split(\",\");\r\n        Log.d(\"search\",\"gl[0]: \" + gl[0]);\r\n        if (gl == null || gl[0].equals(\"\")) {\r\n            gl = new String[]{};\r\n        }\r\n        if (gl.length > 0) {\r\n            address = address.concat(\"Genres=\");\r\n            for (String g : gl) {\r\n                if (gl[gl.length - 1].equals(g)) {\r\n                    address = address.concat(g + \"&\");\r\n                } else {\r\n                    address = address.concat(g + \"%2C\");\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        address = address.concat(\"SortBy=Relevance&\");\r\n        address = address.concat(\"Includes=Images%2CGenres%2CDescriptions&\");\r\n\r\n        String pt[] = progTypes.split(\",\");\r\n\r\n        if (pt == null || pt[0].equals(\"\")) {\r\n            pt = new String[]{};\r\n        }\r\n        if (pt.length > 0) {\r\n            address = address.concat(\"ProgramTypes=\");\r\n            for (String p : pt) {\r\n                if (pt[pt.length - 1].equals(p)) {\r\n                    address = address.concat(p + \"&\");\r\n                } else {\r\n                    address = address.concat(p + \"%2C\");\r\n                }\r\n            }\r\n        }\r\n\r\n        String prv[] = providers.split(\",\");\r\n        if (prv == null || prv[0].equals(\"\")) {\r\n            prv = new String[]{};\r\n        }\r\n        if (prv.length > 0) {\r\n            address = address.concat(\"Providers=%20\");\r\n            for (String p : prv) {\r\n                if (prv[prv.length - 1].equals(p)) {\r\n                    address = address.concat(p);\r\n                } else {\r\n                    address = address.concat(p + \"%2C\");\r\n                }\r\n            }\r\n        }\r\n\r\n        Request request = new Request.Builder()\r\n                .url(address)\r\n                .get()\r\n                .addHeader(\"Content-Type\", \"application/json\")\r\n                .addHeader(\"X-RapidAPI-Key\", \"0781c4e67fmsh14845fdab783a92p1a799ejsna0098cb737dd\")\r\n                .addHeader(\"X-RapidAPI-Host\", \"ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com\")\r\n                .build();\r\n\r\n        Log.d(\"search\", request.toString());\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                //Call\r\n                Log.d(\"search\", \"call from response: \" + call.request().toString());\r\n\r\n                //A Response has a headers and a body\r\n                //Headers just contain info or metadata about the response like number of calls left for the free trial\r\n                // or the Access control methods allowed like GET, POST, PUT, etc\r\n\r\n                //The body has all of the data about the shows and movies found, if any..\r\n                try (ResponseBody responseBody = response.body()) {\r\n                    if (!response.isSuccessful()) {\r\n                        throw new IOException(\"Unexpected code \" + response);\r\n                    }\r\n                    String results = responseBody.string();\r\n                    try {\r\n                        acb.onCallback(results);\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } catch (IOException i) {\r\n                    i.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void apiCallImage(String path, final ApiCallback acb) throws IOException {\r\n        OkHttpClient client = new OkHttpClient(); //A client for networking with the Api online\r\n        //Log.d(\"search\", \"Title: \" + title );\r\n        Request request = new Request.Builder() // This is the query we build\r\n                .url(\"https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/Images/%7Bfilepath%7D/Redirect?Redirect=false\")\r\n                .get()\r\n                .addHeader(\"x-rapidapi-host\", \"ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com\")\r\n                .addHeader(\"x-rapidapi-key\", \"0781c4e67fmsh14845fdab783a92p1a799ejsna0098cb737dd\")\r\n                .addHeader(\"accept\", \"application/json\")\r\n                .addHeader(\"filepath\", path) //String title\r\n                .addHeader(\"providers\", \"Netflix,Hulu,AmazonPrimeVideo,HBO,GooglePlay,iTunes\")\r\n                .addHeader(\"expirationminutes\", \"Relevance\") //Options: Relevance, Timestamp, IvaRating, ReleaseDate\r\n                .build();\r\n\r\n        Log.d(\"search\", request.toString());\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                //A Response has a headers and a body\r\n                //Headers just contain info or metadata about the response like number of calls left for the free trial\r\n                // or the Access control methods allowed like GET, POST, PUT, etc\r\n\r\n                //The body has all of the data about the shows and movies found, if any..\r\n                try (ResponseBody responseBody = response.body()) {\r\n                    if (!response.isSuccessful()) {\r\n                        throw new IOException(\"Unexpected code \" + response);\r\n                    }\r\n//\r\n                    //Here is where we get the query results\r\n                    String results = responseBody.string();\r\n                    try {\r\n                        acb.onCallback(results);\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } catch (IOException i) {\r\n                    i.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static void checkProfileImg(final CheckCallBack ccb, final String username) {\r\n        Log.d(\"img\", \"In checkProfileImg\");\r\n        Log.d(\"img\", username);\r\n        FirebaseStorage storage = FirebaseStorage.getInstance();\r\n\r\n        ///Urw3ICjs0edn1hsM7ACFPWDMTeG3/profile_image.jpg\r\n        StorageReference storageRef = storage.getReference();\r\n\r\n        StorageReference userRef = storageRef.child(username);\r\n        final StorageReference picRef = storageRef.child(username).child(\"profile_image.jpg\");\r\n        Log.d(\"img\", picRef.toString());\r\n        picRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n            @Override\r\n            public void onSuccess(Uri uri) {\r\n                ccb.onCallback(true);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n\r\n                Log.d(\"img\", \"Something went wrong\");\r\n                ccb.onCallback(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    static void setProfileImg(String username, byte[] data) {\r\n        Log.d(\"img\", \"In setProfileImg\");\r\n\r\n        FirebaseStorage storage = FirebaseStorage.getInstance();\r\n        StorageReference storageRef = storage.getReference();\r\n        StorageReference profileRef = storageRef.child(username);\r\n        StorageReference profileImgRef = storageRef.child(username + \"/profile_image.jpg\");\r\n        Log.d(\"img\", \"Reference created: \" + profileImgRef);\r\n\r\n        UploadTask uploadTask = profileImgRef.putBytes(data);\r\n        uploadTask.addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception exception) {\r\n                // Handle unsuccessful uploads\r\n                Log.d(\"file\", \"upload FAILED\");\r\n            }\r\n        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                // taskSnapshot.getMetadata() contains file metadata such as size, content-type, etc.\r\n                // ...\r\n                Log.d(\"file\", \"upload SUCCESSFUL\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void downloadProfileImg(final ImageCallBack icb, String username) {\r\n        FirebaseStorage storage = FirebaseStorage.getInstance();\r\n        StorageReference storageRef = storage.getReference();\r\n        StorageReference imageRef = storageRef.child(username + \"/profile_image.jpg\");\r\n        Log.d(\"file\", \"Downloading profile image\");\r\n        final long ONE_MEGABYTE = 1024 * 1024;\r\n        imageRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\r\n            @Override\r\n            public void onSuccess(byte[] bytes) {\r\n                icb.onCallback(bytes);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception exception) {\r\n                // Handle any errors\r\n                Log.d(\"check\", \"No Profile Image\");\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/whatdoyouwannawatch/MainActivity.java	(revision 03e411364e859d552b513d025f45106a83bcf83a)
+++ app/src/main/java/com/example/whatdoyouwannawatch/MainActivity.java	(date 1606690581116)
@@ -118,7 +118,9 @@
                     }
                 });
     }
+
     public static Object data = null;
+
     static Object pullData(char type, String id, final DataCallback dcb) {
         String t = "theatres";
         String u = "users";
@@ -143,6 +145,7 @@
                         }
                     }
                 }
+
                 @Override
                 public void onCancelled(DatabaseError databaseError) {
                     // Getting User failed, log a message
@@ -171,6 +174,7 @@
                         }
                     }
                 }
+
                 @Override
                 public void onCancelled(DatabaseError databaseError) {
                     // Getting User failed, log a message
@@ -181,13 +185,13 @@
             myRef.addListenerForSingleValueEvent(theatreListener);
             myRef.removeEventListener(theatreListener);
         }
-        if (data != null){
-            return (Object)data;
+        if (data != null) {
+            return (Object) data;
         }
         return null;
     }
 
-    static void deleteData(Object obj){
+    static void deleteData(Object obj) {
         // A HashMap is used to upload information to firebase, the String is the location in
         // firebase and the Object is the Object to be put in firebase
         HashMap<String, Object> map = new HashMap<>();
@@ -253,10 +257,10 @@
                     @Override
                     public void onComplete(@NonNull Task<Void> task) {
                         if (task.isSuccessful()) {
-                            MainActivity.pullData( 'u', user.getDisplayName(), new DataCallback() {
+                            MainActivity.pullData('u', user.getDisplayName(), new DataCallback() {
                                 @Override
                                 public void onCallback(Object usr) {
-                                    if(usr== null){
+                                    if (usr == null) {
                                         User newUser = new User(user.getDisplayName());
                                         MainActivity.pushData(newUser);
                                     }
@@ -274,11 +278,14 @@
     // To implement this method, I need to use a callback function
     public static void apiCallSearch(String progTypes, String genres, String providers, final ApiCallback acb) throws IOException {
 
-        OkHttpClient client = new OkHttpClient(); //A client for networking with the Api online
+        final OkHttpClient client = new OkHttpClient(); //A client for networking with the Api online
         //Log.d("search", "Title: " + title );
-        genres = genres.replaceAll("\\s+", "");
-        providers = providers.replaceAll("\\s+", "");
-
+        if (genres !=null) {
+            genres = genres.replaceAll("\\s+", "");
+        }
+        if (providers != null) {
+            providers = providers.replaceAll("\\s+", "");
+        }
 
         Log.d("search", "genres: " + genres);
         Log.d("search", "providers: " + providers);
@@ -294,101 +301,157 @@
             ")
         */
 
-        String address = "https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/entertainment/search/?";
-
-        String gl[] = genres.split(",");
-        Log.d("search","gl[0]: " + gl[0]);
-        if (gl == null || gl[0].equals("")) {
-            gl = new String[]{};
-        }
-        if (gl.length > 0) {
-            address = address.concat("Genres=");
-            for (String g : gl) {
-                if (gl[gl.length - 1].equals(g)) {
-                    address = address.concat(g + "&");
-                } else {
-                    address = address.concat(g + "%2C");
-                }
-            }
-        }
-
-
-        address = address.concat("SortBy=Relevance&");
-        address = address.concat("Includes=Images%2CGenres%2CDescriptions&");
-
-        String pt[] = progTypes.split(",");
+//        String address = "https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/entertainment/search/?";
+//        String gl[] = genres.split(",");
+//        Log.d("search", "gl[0]: " + gl[0]);
+//        if (gl == null || gl[0].equals("")) {
+//            gl = new String[]{};
+//        }
+//        if (gl.length > 0) {
+//            address = address.concat("Genres=");
+//            for (String g : gl) {
+//                if (gl[gl.length - 1].equals(g)) {
+//                    address = address.concat(g + "&");
+//                } else {
+//                    address = address.concat(g + "%2C");
+//                }
+//            }
+//        }
+//
+//
+//        address = address.concat("SortBy=Relevance&");
+//        address = address.concat("Includes=Images%2CGenres%2CDescriptions&");
+//
+//        String pt[] = progTypes.split(",");
+//
+//        if (pt == null || pt[0].equals("")) {
+//            pt = new String[]{};
+//        }
+//        if (pt.length > 0) {
+//            address = address.concat("ProgramTypes=");
+//            for (String p : pt) {
+//                if (pt[pt.length - 1].equals(p)) {
+//                    address = address.concat(p + "&");
+//                } else {
+//                    address = address.concat(p + "%2C");
+//                }
+//            }
+//        }
+//
+//        String prv[] = providers.split(",");
+//        if (prv == null || prv[0].equals("")) {
+//            prv = new String[]{};
+//        }
+//        if (prv.length > 0) {
+//            address = address.concat("Providers=%20");
+//            for (String p : prv) {
+//                if (prv[prv.length - 1].equals(p)) {
+//                    address = address.concat(p);
+//                } else {
+//                    address = address.concat(p + "%2C");
+//                }
+//            }
+//        }
 
-        if (pt == null || pt[0].equals("")) {
-            pt = new String[]{};
-        }
-        if (pt.length > 0) {
-            address = address.concat("ProgramTypes=");
-            for (String p : pt) {
-                if (pt[pt.length - 1].equals(p)) {
-                    address = address.concat(p + "&");
-                } else {
-                    address = address.concat(p + "%2C");
-                }
-            }
-        }
-
-        String prv[] = providers.split(",");
-        if (prv == null || prv[0].equals("")) {
-            prv = new String[]{};
-        }
-        if (prv.length > 0) {
-            address = address.concat("Providers=%20");
-            for (String p : prv) {
-                if (prv[prv.length - 1].equals(p)) {
-                    address = address.concat(p);
-                } else {
-                    address = address.concat(p + "%2C");
-                }
-            }
-        }
-
-        Request request = new Request.Builder()
-                .url(address)
+        final Request request = new Request.Builder()
+                .url("https://ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com/entertainment/search/")
                 .get()
                 .addHeader("Content-Type", "application/json")
                 .addHeader("X-RapidAPI-Key", "0781c4e67fmsh14845fdab783a92p1a799ejsna0098cb737dd")
                 .addHeader("X-RapidAPI-Host", "ivaee-internet-video-archive-entertainment-v1.p.rapidapi.com")
+                .addHeader("Genres", genres)
+                .addHeader("Providers", providers)
+                .addHeader("ProgramTypes", progTypes)
+                .addHeader("SortBy", "Relevance")
                 .build();
 
         Log.d("search", request.toString());
 
-        client.newCall(request).enqueue(new Callback() {
+        //TODO: Run this on its own thread
+        Runnable runnable = new Runnable() {
+
+
+            private boolean doStop = false;
+
+            public synchronized void doStop() {
+                this.doStop = true;
+            }
+
+            private synchronized boolean keepRunning() {
+                return this.doStop == false;
+            }
+
             @Override
-            public void onFailure(Call call, IOException e) {
-                e.printStackTrace();
-            }
-
-            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
-            @Override
-            public void onResponse(Call call, Response response) throws IOException {
-                //Call
-                Log.d("search", "call from response: " + call.request().toString());
-
-                //A Response has a headers and a body
-                //Headers just contain info or metadata about the response like number of calls left for the free trial
-                // or the Access control methods allowed like GET, POST, PUT, etc
-
-                //The body has all of the data about the shows and movies found, if any..
-                try (ResponseBody responseBody = response.body()) {
-                    if (!response.isSuccessful()) {
-                        throw new IOException("Unexpected code " + response);
-                    }
-                    String results = responseBody.string();
-                    try {
-                        acb.onCallback(results);
-                    } catch (JSONException e) {
-                        e.printStackTrace();
-                    }
-                } catch (IOException i) {
-                    i.printStackTrace();
+            public void run() {
+                while (keepRunning()) {
+                    Response response = null;
+                    try {
+                        response = client.newCall(request).execute();
+                        try (ResponseBody responseBody = response.body()) {
+                            if (!response.isSuccessful()) {
+                                throw new IOException("Unexpected code " + response);
+                            }
+                            String results = responseBody.string();
+                            try {
+                                acb.onCallback(results);
+                                doStop = true;
+                            } catch (JSONException e) {
+                                e.printStackTrace();
+                            }
+                        } catch (IOException i) {
+                            i.printStackTrace();
+                        }
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+
+                    // keep doing what this thread should do.
+                    System.out.println("Running");
+
+                    try {
+                        Thread.sleep(3L * 1000L);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+
                 }
+
             }
-        });
+        };
+
+
+//        client.newCall(request).enqueue(new Callback() {
+//            @Override
+//            public void onFailure(Call call, IOException e) {
+//                e.printStackTrace();
+//            }
+//
+//            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
+//            @Override
+//            public void onResponse(Call call, Response response) throws IOException {
+//                //Call
+//                Log.d("search", "call from response: " + call.request().toString());
+//
+//                //A Response has a headers and a body
+//                //Headers just contain info or metadata about the response like number of calls left for the free trial
+//                // or the Access control methods allowed like GET, POST, PUT, etc
+//
+//                //The body has all of the data about the shows and movies found, if any..
+//                try (ResponseBody responseBody = response.body()) {
+//                    if (!response.isSuccessful()) {
+//                        throw new IOException("Unexpected code " + response);
+//                    }
+//                    String results = responseBody.string();
+//                    try {
+//                        acb.onCallback(results);
+//                    } catch (JSONException e) {
+//                        e.printStackTrace();
+//                    }
+//                } catch (IOException i) {
+//                    i.printStackTrace();
+//                }
+//            }
+//        });
     }
 
     public static void apiCallImage(String path, final ApiCallback acb) throws IOException {
