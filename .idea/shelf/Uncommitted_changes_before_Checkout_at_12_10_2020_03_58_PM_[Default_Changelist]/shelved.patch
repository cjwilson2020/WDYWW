Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'jacoco'\r\n\r\ntask jacocoTestReport(type: JacocoReport) {\r\n    reports {\r\n        xml {\r\n            enabled true // coveralls plugin depends on xml format report\r\n        }\r\n\r\n        html {\r\n            enabled true\r\n        }\r\n    }\r\n\r\n    afterEvaluate {\r\n        classDirectories.from = files(classDirectories.files.collect {\r\n            fileTree(dir: it,\r\n                    exclude: ['com.example.whatyouwannawatch.MediaRanking/**'])\r\n        })\r\n    }\r\n}\r\njacoco {\r\n    toolVersion = \"0.7.5.201505241946\"\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.whatdoyouwannawatch\"\r\n        minSdkVersion 25\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        multiDexEnabled true\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables.useSupportLibrary = true\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n        debug {\r\n        testCoverageEnabled = true\r\n        }\r\n    }\r\n    // avoid method is not mocked error\r\n    testOptions {\r\n        unitTests.returnDefaultValues = true\r\n    }\r\n    // Jacoco\r\n\r\n}\r\n\r\ndependencies {\r\n    // for v4.x :\r\n    implementation 'org.conscrypt:conscrypt-android:2.2.1'\r\n    implementation 'com.squareup.okhttp3:okhttp:4.9.0'\r\n    implementation 'org.conscrypt:conscrypt-android:2.5.1'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    implementation platform('com.google.firebase:firebase-bom:25.12.0')\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n    implementation 'com.google.firebase:firebase-database'\r\n    implementation 'com.firebaseui:firebase-ui-auth:6.2.0'\r\n    implementation 'com.google.firebase:firebase-auth:20.0.0'\r\n    implementation 'com.google.firebase:firebase-storage'\r\n    implementation 'com.google.firebase:firebase-messaging:20.2.3'\r\n\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    implementation files('libs\\\\unirest-java-1.4.9.jar')\r\n    implementation files('libs\\\\commons-codec-1.6.jar')\r\n    implementation files('libs\\\\commons-logging-1.1.3.jar')\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    testImplementation 'junit:junit:4.13.1'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    // firebase login UI dependencies\r\n    implementation 'com.firebaseui:firebase-ui-auth:6.2.0'\r\n    implementation 'com.google.firebase:firebase-auth:20.0.0'\r\n\r\n    // RangeSeekBar\r\n    implementation 'org.florescu.android.rangeseekbar:rangeseekbar-library:0.3.0'\r\n\r\n    // Convert object to JSON\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n\r\n    // Espresso\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'\r\n\r\n    // androidx.test\r\n    androidTestImplementation 'androidx.test:runner:1.1.0'\r\n    androidTestImplementation 'androidx.test:rules:1.1.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 4359728ff8dc00606f41f1e2ed987e497eacb4ec)
+++ app/build.gradle	(date 1607636222355)
@@ -2,29 +2,39 @@
 apply plugin: 'com.google.gms.google-services'
 apply plugin: 'jacoco'
 
-task jacocoTestReport(type: JacocoReport) {
+def coverageSourceDirs = [
+        '../app/src/main/java'
+]
+
+task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
+
+    group = "Reporting"
+    description = "Generate Jacoco coverage reports after running tests."
     reports {
-        xml {
-            enabled true // coveralls plugin depends on xml format report
-        }
-
-        html {
-            enabled true
-        }
-    }
-
-    afterEvaluate {
-        classDirectories.from = files(classDirectories.files.collect {
-            fileTree(dir: it,
-                    exclude: ['com.example.whatyouwannawatch.MediaRanking/**'])
-        })
+        xml.enabled = true
+        html.enabled = true
+    }
+    classDirectories.from = fileTree(
+            dir: './build/intermediates/classes/debug',
+            includes: ['**/*$MainActivity.class' ])
+    sourceDirectories.from = files(coverageSourceDirs)
+    executionData.from = files("$buildDir/jacoco/testDebug.exec")
+    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
+    // We iterate through the compiled .class tree and rename $$ to $.
+    doFirst {
+        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
+            if (file.name.contains('$$')) {
+                file.renameTo(file.path.replace('$$', '$'))
+            }
+        }
     }
 }
-jacoco {
-    toolVersion = "0.7.5.201505241946"
-}
 
 android {
+    jacoco {
+        version = '0.7.3.201502191951'
+    }
+
     compileSdkVersion 29
 
     buildToolsVersion "29.0.3"
@@ -46,12 +56,17 @@
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         }
         debug {
-        testCoverageEnabled = true
+            testCoverageEnabled = true
         }
     }
     // avoid method is not mocked error
     testOptions {
         unitTests.returnDefaultValues = true
+        unitTests.all {
+            jacoco {
+                includeNoLocationClasses = true
+            }
+        }
     }
     // Jacoco
 
