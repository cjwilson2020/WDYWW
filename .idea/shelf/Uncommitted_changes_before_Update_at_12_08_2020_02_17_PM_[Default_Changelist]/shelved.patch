Index: app/src/main/java/com/example/whatdoyouwannawatch/MediaRanking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.whatdoyouwannawatch;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.GestureDetector;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.gson.Gson;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class MediaRanking extends AppCompatActivity {\r\n\r\n    private static ArrayList<Media> mediaList = new ArrayList<Media>(5);\r\n    private String genreList = null;\r\n    private String streamingServiceList = null;\r\n    private String theatreID;\r\n    public static ArrayList<URL> im;\r\n\r\n    FirebaseUser fbUser;\r\n\r\n    private static final String TAG = \"MediaRanking\";\r\n    String progTypes;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_media_ranking);\r\n        fbUser = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n\r\n        if (extras != null) { //extra passed into this\r\n            genreList = extras.getString(\"genreList\");\r\n            streamingServiceList = extras.getString(\"streamingServiceList\");\r\n            theatreID = extras.getString(\"theatreID\");\r\n            progTypes = extras.getString(\"progType\");\r\n        }\r\n        extras.clear();\r\n\r\n        retrieveData();\r\n    }\r\n\r\n    private void initRecyclerView() {\r\n\r\n        RecyclerView recyclerView = findViewById(R.id.ranking_recycler);\r\n        MediaRankingAdapter mediaRankingAdapter = new MediaRankingAdapter(mediaList, this);\r\n\r\n        ItemTouchHelper.Callback callback = new MediaRankingTouchHelper(mediaRankingAdapter);\r\n        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(callback);\r\n        mediaRankingAdapter.setTouchHelper(itemTouchHelper);\r\n        itemTouchHelper.attachToRecyclerView(recyclerView);\r\n\r\n        recyclerView.setAdapter(mediaRankingAdapter);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n\r\n    }\r\n\r\n    private void retrieveData() {\r\n        getMediaList(progTypes, genreList, streamingServiceList, new MediaCallback() {\r\n            @Override\r\n            public void onCallback(final ArrayList<Media> m) {\r\n                runOnUiThread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n\r\n                        initRecyclerView();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public void onClickRanking(View v) {\r\n        // TODO for testing purposes\r\n        ArrayList<String> toasts = new ArrayList<String>();\r\n        for (Media e : mediaList) {\r\n            toasts.add(e.getTitle());\r\n        }\r\n        Toast.makeText(MediaRanking.this, \"\" + toasts.toString(), Toast.LENGTH_SHORT).show();\r\n\r\n        MainActivity.pullData('t', theatreID, new DataCallback() {\r\n            @Override\r\n            public void onCallback(Object obj) {\r\n                if (obj != null) {\r\n                    Theatre t = (Theatre) obj;\r\n                    List<User> users = t.getUsers();\r\n                    for (int i = 0; i < users.size(); i++) {\r\n                        if (users.get(i).getUsername().equals(fbUser.getDisplayName())) {\r\n                            users.get(i).setRankings(mediaList);\r\n                        }\r\n                    }\r\n                    MainActivity.pushData(t);\r\n                }\r\n            }\r\n        });\r\n\r\n        Intent intent = new Intent(this, ResultActivity.class);\r\n        intent.putExtra(\"theatreID\", theatreID);\r\n        intent.putExtra(\"mediaList\", (Serializable) mediaList);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public static void getMediaList(String progTypes, String genreList, String streamingServiceList, final MediaCallback mcb) {\r\n        ArrayList<Media> mediaList = new ArrayList<Media>();\r\n\r\n        try {\r\n            MainActivity.apiCallSearch(progTypes, genreList, streamingServiceList, new ApiCallback() {\r\n                @Override\r\n                public void onCallback(String res) throws JSONException, IOException {\r\n                    //Here is where we will update the view\r\n                    // res is a JSON string containing the search results\r\n\r\n                    JSONObject obj = new JSONObject(res); //make it a JSON object\r\n                    JSONArray hits = obj.getJSONArray(\"Hits\"); //The hits are the actual result listings\r\n                    //Log.d(\"search\", hits.toString(2));\r\n\r\n                    // public Media(String id, String title, List<String> genres, List<String> cast, LocalTime length, String director, String writer, String description, Image poster, Double rating) {\r\n                    final int len = hits.length();\r\n                    Log.d(\"search\", \"number of results: \" + len);\r\n\r\n                    for (int i = 0; i < 5; i = i + 1) {\r\n                        Log.d(\"search\", \"Result #\" + (i + 1));\r\n                        String iden = \"\";\r\n                        String tit = \"\";\r\n                        ArrayList<String> gens = new ArrayList<String>();\r\n                        ArrayList<String> cas = new ArrayList<String>();\r\n                        int dur = 0;\r\n                        String director = \"\";\r\n                        String writer = \"\";\r\n                        String desc = \"\";\r\n\r\n                        Double rat = 0.0;\r\n\r\n                        JSONObject result_info = hits.getJSONObject(i).getJSONObject(\"Source\"); //all the info for this lisiting\r\n                        //Log.d(\"search\", result_info.toString());\r\n\r\n                        String[] info = {\"Id\", \"Title\", \"Cast\", \"Runtime\", \"Director\", \"Description\", \"Image\", \"IvaRating\"};\r\n                        final int siz = info.length;\r\n                        for (int j = 0; j < siz; j = j + 1) { //each piece of info about current listing\r\n                            Log.d(\"search\", \"Info[\" + j + \"]: \" + info[j]);\r\n                            if (\"Id\".equals(info[j])) {  //Id\r\n                                if (result_info.has(info[j])) {\r\n                                    //Translate String to desired datatype\r\n                                    iden = ((String) result_info.getString(info[j]));\r\n                                } else {\r\n                                    iden = (\"No \" + info[j] + \" available\");\r\n                                }\r\n                            } else if (\"Title\".equals(info[j])) { //Title\r\n                                if (result_info.has(info[j])) {\r\n                                    tit = (String) result_info.getString(info[j]);\r\n                                    //Log.d(\"search\", tit);\r\n\r\n                                } else {\r\n                                    tit = (\"No \" + info[j] + \" available\");\r\n                                }\r\n                            } else if (\"IvaRating\".equals(info[j])) { //Rating\r\n                                if (result_info.has(info[j])) {\r\n                                    rat = ((double) Integer.parseInt(result_info.getString(info[j])));\r\n                                } else {\r\n                                    rat = (0.0);\r\n                                }\r\n                            } else if (\"Description\".equals(info[j])) { // Description\r\n                                //  Log.d(\"search\", \"Has Descriptions: \" + result_info.getJSONArray(\"Descriptions\"));\r\n                                if (result_info.has(\"Descriptions\") && result_info.getJSONArray(\"Descriptions\").length() > 0) {\r\n                                    desc = ((String) result_info.getJSONArray(\"Descriptions\").getJSONObject(0).getString(info[j]));\r\n                                } else {\r\n                                    desc = (\"No \" + info[j] + \" available\");\r\n                                }\r\n                            } else if (\"Cast\".equals(info[j]) || \"Director\".equals(info[j])) { //Director, Cast\r\n                                if (result_info.has(\"Contributors\") && result_info.getJSONArray(\"Contributors\").length() > 0) {\r\n                                    JSONArray temp = result_info.getJSONArray(\"Contributors\");\r\n                                    for (int k = 0; k < temp.length(); k++) { // for each contributor listed, add its PersonName if it satosfies condition\r\n                                        if (temp.getJSONObject(k).getString(\"Job\").equals(\"Director\")) {\r\n                                            director.concat(temp.getJSONObject(k).getString(\"PersonName\") + \",\");\r\n                                        } else if (temp.getJSONObject(k).getString(\"Job\").equals(\"Actor\")) {\r\n                                            cas.add(temp.getJSONObject(k).getString(\"PersonName\"));\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    director = \"no Director available\";\r\n                                }\r\n                            }\r\n                            if (result_info.has(info[j]))\r\n                                Log.d(\"search\", info[j] + \": \" + result_info.getString(info[j]));\r\n                        }\r\n\r\n                        String img = null;\r\n                        if (result_info.has(\"Images\") && result_info.getJSONArray(\"Images\").length() > 0) {\r\n                            JSONArray temp = result_info.getJSONArray(\"Images\");\r\n                            if (temp.getJSONObject(0) != null)\r\n                                img = temp.getJSONObject(0).getString(\"FilePath\");\r\n\r\n                            if (img != null)\r\n                                Log.d(\"search\", \"poster found\");\r\n                                //m.setPoster(img);\r\n                            else\r\n                                Log.d(\"search\", \"no poster\");\r\n\r\n                            MainActivity.apiCallImage(img, new ApiCallback() {\r\n                                @Override\r\n                                public void onCallback(String res) throws JSONException, MalformedURLException {\r\n                                    Log.d(\"img\", res);\r\n                                    //res gets the image URL\r\n                                    JSONObject obj = new JSONObject(res); //make it a JSON object\r\n                                    String addr = obj.getString(\"Url\");\r\n                                    Log.d(\"img\", \"addr: \" + addr);\r\n                                    im.add(new URL(addr));\r\n\r\n                                    Log.d(\"img\", \"im[0]: \" + im.get(im.size()-1));\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        Log.d(\"img\", \"im[0] after downloading: \");\r\n                        if(im.size() > 0) {\r\n                            Media m = new Media(iden, tit, gens, cas, dur, director, writer, desc, im.get(im.size() - 1), rat);\r\n                            Log.d(\"search\", \"m.Title = \" + m.getTitle());\r\n                            MediaRanking.mediaList.add(m);\r\n\r\n                            Log.d(\"search\", \" returned Medias: \" + MediaRanking.mediaList.size());\r\n                            mcb.onCallback(MediaRanking.mediaList);\r\n                        }else{\r\n                            Media m = new Media(iden, tit, gens, cas, dur, director, writer, desc, null, rat);\r\n                            Log.d(\"search\", \"m.Title = \" + m.getTitle());\r\n                            MediaRanking.mediaList.add(m);\r\n\r\n                            Log.d(\"search\", \" returned Medias: \" + MediaRanking.mediaList.size());\r\n                            mcb.onCallback(MediaRanking.mediaList);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n        } catch (\r\n                IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass MediaRankingAdapter extends RecyclerView.Adapter<MediaRankingAdapter.ViewHolder> implements ItemTouchHelperAdapter {\r\n\r\n    private static final String TAG = \"RankingAdapter\";\r\n\r\n    private ArrayList<Media> mediaList;\r\n    private Context context;\r\n    private ItemTouchHelper itemTouchHelper;\r\n\r\n\r\n    public MediaRankingAdapter(ArrayList<Media> list, Context con) {\r\n        mediaList = list;\r\n        context = con;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_media_ranking_item, parent, false);\r\n        ViewHolder holder = new ViewHolder(view);\r\n        return holder;\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, final int position) {\r\n        Log.d(TAG, \"onBindViewHolder called\");\r\n\r\n        holder.text.setText(mediaList.get(position).getTitle());\r\n\r\n        holder.layout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Log.d(TAG, \"onClick: \" + mediaList.get(position));\r\n            }\r\n        });\r\n\r\n        holder.btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(context, MediaDetails.class);\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mediaList.get(position));\r\n                intent.putExtra(\"data\", json);\r\n                context.startActivity(intent);\r\n\r\n                Toast.makeText(context, mediaList.get(position).getTitle(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    public ArrayList<Media> getMediaList() {\r\n        return mediaList;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return mediaList.size();\r\n    }\r\n\r\n    @Override\r\n    public void onItemMove(int fromPosition, int toPosition) {\r\n        Media media = mediaList.get(fromPosition);\r\n        mediaList.remove(fromPosition);\r\n        mediaList.add(toPosition, media);\r\n        notifyItemMoved(fromPosition, toPosition);\r\n    }\r\n\r\n    public void setTouchHelper(ItemTouchHelper helper) {\r\n        this.itemTouchHelper = helper;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnTouchListener, GestureDetector.OnGestureListener {\r\n        TextView text;\r\n        Button btn;\r\n        RelativeLayout layout;\r\n        GestureDetector gestureDetector;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            text = itemView.findViewById(R.id.text_candidate_media);\r\n            btn = itemView.findViewById(R.id.btn_media_details);\r\n            layout = itemView.findViewById(R.id.media_ranking_layout);\r\n\r\n            gestureDetector = new GestureDetector(itemView.getContext(), this);\r\n            itemView.setOnTouchListener(this);\r\n        }\r\n\r\n        @Override\r\n        public boolean onDown(MotionEvent motionEvent) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onShowPress(MotionEvent motionEvent) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public boolean onSingleTapUp(MotionEvent motionEvent) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent1, float v, float v1) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onLongPress(MotionEvent motionEvent) {\r\n            itemTouchHelper.startDrag(this);\r\n        }\r\n\r\n        @Override\r\n        public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent1, float v, float v1) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean onTouch(View view, MotionEvent motionEvent) {\r\n            gestureDetector.onTouchEvent(motionEvent);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nclass MediaRankingTouchHelper extends ItemTouchHelper.Callback {\r\n\r\n    private final ItemTouchHelperAdapter adapter;\r\n\r\n    public MediaRankingTouchHelper(ItemTouchHelperAdapter adapter) {\r\n        this.adapter = adapter;\r\n    }\r\n\r\n    @Override\r\n    public boolean isLongPressDragEnabled() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean isItemViewSwipeEnabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void clearView(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {\r\n        super.clearView(recyclerView, viewHolder);\r\n        viewHolder.itemView.setBackgroundColor(ContextCompat.getColor(viewHolder.itemView.getContext(), R.color.cardview_shadow_end_color));\r\n    }\r\n\r\n    @Override\r\n    public void onSelectedChanged(@Nullable RecyclerView.ViewHolder viewHolder, int actionState) {\r\n        super.onSelectedChanged(viewHolder, actionState);\r\n        if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {\r\n            viewHolder.itemView.setBackgroundColor(ContextCompat.getColor(viewHolder.itemView.getContext(), R.color.colorAccent));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {\r\n//        final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;\r\n        return makeFlag(ItemTouchHelper.ACTION_STATE_DRAG, ItemTouchHelper.UP | ItemTouchHelper.DOWN);\r\n    }\r\n\r\n    @Override\r\n    public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n        adapter.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/whatdoyouwannawatch/MediaRanking.java	(revision 020a36e0e1f677f34a45ed495c930c3e2371d5ee)
+++ app/src/main/java/com/example/whatdoyouwannawatch/MediaRanking.java	(date 1607457508133)
@@ -200,7 +200,7 @@
                             } else if ("Cast".equals(info[j]) || "Director".equals(info[j])) { //Director, Cast
                                 if (result_info.has("Contributors") && result_info.getJSONArray("Contributors").length() > 0) {
                                     JSONArray temp = result_info.getJSONArray("Contributors");
-                                    for (int k = 0; k < temp.length(); k++) { // for each contributor listed, add its PersonName if it satosfies condition
+                                    for (int k = 0; k < temp.length(); k++) { // for each contributor listed, add its PersonName if it satisfies condition
                                         if (temp.getJSONObject(k).getString("Job").equals("Director")) {
                                             director.concat(temp.getJSONObject(k).getString("PersonName") + ",");
                                         } else if (temp.getJSONObject(k).getString("Job").equals("Actor")) {
@@ -208,7 +208,7 @@
                                         }
                                     }
                                 } else {
-                                    director = "no Director available";
+                                    director = "No Director information available";
                                 }
                             }
                             if (result_info.has(info[j]))
