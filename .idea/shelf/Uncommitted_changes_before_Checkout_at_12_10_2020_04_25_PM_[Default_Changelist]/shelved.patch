Index: app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.whatdoyouwannawatch;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class TheatreUnitTest {\r\n    List<User> userList;\r\n    List<Media> options;\r\n    List<String> genres;\r\n    Date date;\r\n    Result result;\r\n    Theatre t;\r\n    User user1;\r\n    User user2;\r\n    User user3;\r\n    Media m1;\r\n    Media m2;\r\n    Media m3;\r\n    Media m4;\r\n    Media m5;\r\n    String g1;\r\n    String g2;\r\n    String g3;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        user1 = new User(\"1\",\"1\",\"1\");\r\n        user2 = new User(\"2\",\"2\",\"2\");\r\n        user3 = new User(\"3\",\"3\",\"3\");\r\n        userList = new ArrayList<>();\r\n        userList.add(user1);\r\n        userList.add(user2);\r\n        userList.add(user3);\r\n        m1 = new Media(\"11\");\r\n        m2 = new Media(\"22\");\r\n        m3 = new Media(\"33\");\r\n        m4 = new Media(\"44\");\r\n        m5 = new Media(\"55\");\r\n        options = new ArrayList<>();\r\n        options.add(m1);\r\n        options.add(m2);\r\n        options.add(m3);\r\n        options.add(m4);\r\n        options.add(m5);\r\n        genres = new ArrayList<>();\r\n        genres.add(g1);\r\n        genres.add(g2);\r\n        genres.add(g3);\r\n        t = new Theatre(\"123\");\r\n        result = new Result();\r\n    }\r\n\r\n    @Test\r\n    public void TestGetUID() {\r\n        assertEquals(t.getHostID(), \"123\");\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetUsers() {\r\n        t.setUsers(userList);\r\n        assertEquals(t.getUsers().get(0), user1);\r\n        assertEquals(t.getUsers().get(1), user2);\r\n        assertEquals(t.getUsers().get(2), user3);\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetOptions() {\r\n        t.setOptions(options);\r\n        assertEquals(t.getOptions().get(0), m1);\r\n        assertEquals(t.getOptions().get(1), m2);\r\n        assertEquals(t.getOptions().get(2), m3);\r\n        assertEquals(t.getOptions().get(3), m4);\r\n        assertEquals(t.getOptions().get(4), m5);\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetGenres() {\r\n        t.setGenres(genres);\r\n        assertEquals(t.getGenres().get(0), g1);\r\n        assertEquals(t.getGenres().get(1), g2);\r\n        assertEquals(t.getGenres().get(2), g3);\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetResult() {\r\n        t.setResult(result);\r\n        assertEquals(t.getResult(), result);\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetMinTime() {\r\n        t.setMinTime(0);\r\n        assertEquals(t.getMinTime(), 0);\r\n        t.setMinTime(-1000);\r\n        assertEquals(t.getMinTime(), -1000);\r\n        t.setMinTime(1000);\r\n        assertEquals(t.getMinTime(), 1000);\r\n    }\r\n\r\n    @Test\r\n    public void TestSetGetMaxTime() {\r\n        t.setMaxTime(0);\r\n        assertEquals(t.getMaxTime(), 0);\r\n        t.setMaxTime(10000);\r\n        assertEquals(t.getMaxTime(), 10000);\r\n        t.setMaxTime(-10000);\r\n        assertEquals(t.getMaxTime(), -10000);\r\n    }\r\n\r\n    @Test\r\n    public void TestAddUser() {\r\n        t.setUsers(userList);\r\n        User u4 = new User();\r\n        t.addUser(user3);\r\n        t.addUser(u4);\r\n        assertEquals(t.getUsers().get(2), user3);\r\n        assertEquals(t.getUsers().get(3), u4);\r\n    }\r\n\r\n    @Test\r\n    public void TestRemoveUser() {\r\n        t.setUsers(userList);\r\n        t.removeUser(user1.getUsername());\r\n        assertEquals(t.getUsers().get(0), user2);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java	(revision e9d42ea40ae1fe35300774d71c3b255be8cf8522)
+++ app/src/test/java/com/example/whatdoyouwannawatch/TheatreUnitTest.java	(date 1607639004312)
@@ -93,26 +93,6 @@
         assertEquals(t.getResult(), result);
     }
 
-    @Test
-    public void TestSetGetMinTime() {
-        t.setMinTime(0);
-        assertEquals(t.getMinTime(), 0);
-        t.setMinTime(-1000);
-        assertEquals(t.getMinTime(), -1000);
-        t.setMinTime(1000);
-        assertEquals(t.getMinTime(), 1000);
-    }
-
-    @Test
-    public void TestSetGetMaxTime() {
-        t.setMaxTime(0);
-        assertEquals(t.getMaxTime(), 0);
-        t.setMaxTime(10000);
-        assertEquals(t.getMaxTime(), 10000);
-        t.setMaxTime(-10000);
-        assertEquals(t.getMaxTime(), -10000);
-    }
-
     @Test
     public void TestAddUser() {
         t.setUsers(userList);
Index: app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.whatdoyouwannawatch;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\npublic class UserUnitTest {\r\n    User guest1 = new User();\r\n    User user1 = new User(\"some random email address\", \"some random username\", \"some random uid\");\r\n\r\n    @Before\r\n    public void start() throws Exception {\r\n        guest1.addGenres(\"SciFi\");\r\n        guest1.addGenres(\"Romance\");\r\n        user1.addGenres(\"Horror\");\r\n        user1.addGenres(\"Unknown\");\r\n        user1.addGenres(\"111\");\r\n        user1.addRankingToEnd(new Media(\"11\"));\r\n        user1.addRankingToEnd(new Media(\"22\"));\r\n        user1.addRankingToEnd(new Media(\"33\"));\r\n        user1.addPreference(\"Horror\");\r\n        user1.addPreference(\"SciFi\");\r\n        user1.addFriend(new User(\"1\", \"user1\", \"1\"));\r\n        user1.addFriend(new User(\"2\", \"user2\", \"2\"));\r\n        user1.addFriend(new User(\"3\", \"user3\", \"3\"));\r\n        user1.addHistory(new Result());\r\n    }\r\n\r\n    //test basic information\r\n    @Test\r\n    public void GuestIsGuest() {\r\n        assertTrue(guest1.isGuest());\r\n    }\r\n\r\n    @Test\r\n    public void userIsNotGuest() {\r\n        assertTrue(!user1.isGuest());\r\n    }\r\n\r\n    @Test\r\n    public void getUID() {\r\n        assertEquals(\"user id\", user1.getUID(), \"some random uid\");\r\n    }\r\n\r\n    @Test\r\n    public void getUsername() {\r\n        assertEquals(\"user name\", user1.getUsername(), \"some random username\");\r\n    }\r\n\r\n    @Test\r\n    public void setUsername() {\r\n        user1.setUsername(\"yc520\");\r\n        assertEquals(\"user name\", user1.getUsername(), \"yc520\");\r\n    }\r\n\r\n    @Test\r\n    public void getEmail() {\r\n        assertEquals(\"user email\", user1.getEmail(), \"some random email address\");\r\n    }\r\n\r\n    @Test\r\n    public void setEmail() {\r\n        user1.setEmail(\"chenyuan@gmail.com\");\r\n        assertEquals(\"user email\", user1.getEmail(), \"chenyuan@gmail.com\");\r\n    }\r\n\r\n//    @Test\r\n//    public void setUserAvatar() {\r\n//        user1.setUserAvatar();\r\n//    }\r\n\r\n    //test preference settings\r\n    @Test\r\n    public void guestGetGenres() {\r\n        assertEquals(guest1.getGenres().get(1), \"Romance\");\r\n    }\r\n\r\n    @Test\r\n    public void userGetGenres() {\r\n        assertEquals(user1.getGenres().get(2), \"111\");\r\n    }\r\n\r\n    @Test\r\n    public void guestAddGenres() {\r\n        guest1.addGenres(\"222\");\r\n        assertEquals(\"Genres\", guest1.getGenres().get(2), \"222\");\r\n    }\r\n\r\n\r\n    @Test\r\n    public void userAddGenres() {\r\n        user1.addGenres(\"SciFi\");\r\n        assertEquals(\"Genres\", user1.getGenres().get(3), \"SciFi\");\r\n    }\r\n\r\n    @Test\r\n    public void guestRemoveGenres() {\r\n        guest1.removeGenres(\"SciFi\");\r\n        assertEquals(\"Genres\", guest1.getGenres().get(0), \"Romance\");\r\n    }\r\n\r\n    @Test\r\n    public void userRemoveGenres() {\r\n        user1.removeGenres(\"Horror\");\r\n        assertEquals(\"Genres\", user1.getGenres().get(0), \"Unknown\");\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void setOptions() {\r\n        List<Media> options = new ArrayList<>();\r\n        options.add(new Media(\"11\"));\r\n        options.add(new Media(\"22\"));\r\n        options.add(new Media(\"33\"));\r\n        user1.setOptions(options);\r\n        assertEquals(user1.optionSize(), 3);\r\n    }\r\n\r\n    @Test\r\n    public void addRankingToEnd() {\r\n        user1.addRankingToEnd(new Media(\"44\"));\r\n        assertEquals(user1.rankingsSize(), 4);\r\n    }\r\n\r\n//    @Test\r\n//    public void removeRanking() {\r\n//        user1.removeRanking();\r\n//        assertEquals(user1.rankingsSize(), 2);\r\n//    }\r\n\r\n    @Test\r\n    public void clearRanking() {\r\n        user1.clearRanking();\r\n        assertEquals(user1.rankingsSize(), 0);\r\n    }\r\n\r\n    @Test\r\n    public void getRankings() {\r\n        List<Media> testList = user1.getRankings();\r\n        assertEquals(testList.size(), 3);\r\n    }\r\n\r\n    @Test\r\n    public void getPreferences() {\r\n        assertEquals(user1.getPreferences().size(), 2);\r\n    }\r\n\r\n    @Test\r\n    public void addPreference() {\r\n        user1.addPreference(\"Nothing\");\r\n        assertEquals(user1.getPreferences().get(2), \"Nothing\");\r\n    }\r\n\r\n    @Test\r\n    public void removePreference() {\r\n        user1.removePreference(\"Horror\");\r\n        assertEquals(user1.getPreferences().get(0), \"SciFi\");\r\n    }\r\n\r\n\r\n    //test friend\r\n    @Test\r\n    public void getFriends() {\r\n        assertEquals(user1.getFriends().get(0).getUsername(), \"user1\");\r\n    }\r\n\r\n    @Test\r\n    public void addFriend() {\r\n        user1.addFriend(new User(\"22\", \"test user\", \"123\"));\r\n        assertEquals(user1.getFriends().get(3).getUsername(), \"test user\");\r\n    }\r\n\r\n    @Test\r\n    public void removeFriend() {\r\n        user1.removeFriend(user1.getFriends().get(0));\r\n        assertEquals(user1.getFriends().get(0).getUsername(), \"user2\");\r\n    }\r\n\r\n    @Test\r\n    public void getHistory() {\r\n    }\r\n\r\n    @Test\r\n    public void addHistory() {\r\n        user1.addHistory(new Result());\r\n        assertEquals(user1.getHistory().size(), 2);\r\n    }\r\n\r\n    @Test\r\n    public void removeHistory() {\r\n        user1.removeHistory(user1.getHistory().get(0));\r\n        assertEquals(user1.getHistory().size(), 0);\r\n    }\r\n\r\n    @Test\r\n    public void clearHistory() {\r\n        user1.clearHistory();\r\n        assertEquals(user1.getHistory().size(), 0);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java	(revision e9d42ea40ae1fe35300774d71c3b255be8cf8522)
+++ app/src/test/java/com/example/whatdoyouwannawatch/UserUnitTest.java	(date 1607639028561)
@@ -28,7 +28,7 @@
         user1.addFriend(new User("1", "user1", "1"));
         user1.addFriend(new User("2", "user2", "2"));
         user1.addFriend(new User("3", "user3", "3"));
-        user1.addHistory(new Result());
+        user1.addHistory("");
     }
 
     //test basic information
Index: app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.whatdoyouwannawatch;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class BackStageUnitTest {\r\n\r\n    @Test\r\n    public void TestCalcLength() {\r\n        Theatre t1 = new Theatre(\"123\");\r\n        BackStage b1 = new BackStage(t1);\r\n\r\n        User u1= new User(\"1\",\"1\", \"1\");\r\n        int u1t1 = 55;\r\n        int u1t2 = 2;\r\n        u1.setMinLength(u1t1);\r\n        u1.setMaxLength(u1t2);\r\n\r\n        User u2= new User(\"2\",\"2\",\"2\");\r\n        int u2t1 = 50;\r\n        int u2t2 = 121;\r\n        u2.setMinLength(u2t1);\r\n        u2.setMaxLength(u2t2);\r\n\r\n        List<User> users = new ArrayList<User>();\r\n        users.add(u1);\r\n        users.add(u2);\r\n\r\n        t1.setUsers(users);\r\n\r\n        b1.calcLength();\r\n        assertEquals(u1t1, t1.getMinTime());\r\n        assertEquals(u2t2, t1.getMaxTime());\r\n\r\n    }\r\n\r\n    @Test\r\n    public void TestCalcGenre() {\r\n        Theatre t1 = new Theatre(\"123\");\r\n        BackStage b1 = new BackStage(t1);\r\n        User u1= new User(\"1\",\"1\", \"1\");\r\n        u1.addGenres(\"Horror\");\r\n        u1.addGenres(\"Fantasy\");\r\n        u1.addGenres(\"Drama\");\r\n\r\n        User u2= new User(\"2\",\"2\",\"2\");\r\n        u2.addGenres(\"Horror\");\r\n        u2.addGenres(\"Comedy\");\r\n\r\n        User u3= new User(\"3\",\"3\",\"3\");\r\n        u3.addGenres(\"Horror\");\r\n        u3.addGenres(\"Foreign\");\r\n        u3.addGenres(\"Drama\");\r\n\r\n        t1.addUser(u1);\r\n        t1.addUser(u2);\r\n        t1.addUser(u3);\r\n\r\n        b1.calcGenre();\r\n\r\n        assertEquals(\"First choice\",\"Horror\", t1.getGenres().get(0));\r\n        assertEquals(\"Second choice\",\"Drama\", t1.getGenres().get(1));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void TestCalcResultMultiUser() {\r\n        Theatre t1 = new Theatre(\"123\");\r\n        //BackStage b1 = t1.getBackstage();\r\n        BackStage b1 = new BackStage(t1);\r\n\r\n        Media a = new Media(\"A\");\r\n        Media b = new Media(\"B\");\r\n        Media c = new Media(\"C\");\r\n        Media d = new Media(\"D\");\r\n        Media e = new Media( \"E\");\r\n\r\n        User u1= new User(\"1\",\"1\", \"1\");\r\n        User u2= new User(\"2\",\"2\",\"2\");\r\n        User u3= new User(\"3\",\"3\",\"3\");\r\n        User u4 = new User(\"4\", \"4\",\"4\");\r\n        User u5 = new User(\"5\", \"5\",\"5\");\r\n\r\n        t1.addUser(u1);\r\n        t1.addUser(u2);\r\n        t1.addUser(u3);\r\n        t1.addUser(u4);\r\n        t1.addUser(u5);\r\n\r\n        u1.addRankingToEnd(a);\r\n        u1.addRankingToEnd(b);\r\n        u1.addRankingToEnd(c);\r\n        u1.addRankingToEnd(d);\r\n        u1.addRankingToEnd(e);\r\n\r\n        u2.addRankingToEnd(c);\r\n        u2.addRankingToEnd(d);\r\n        u2.addRankingToEnd(e);\r\n        u2.addRankingToEnd(b);\r\n        u2.addRankingToEnd(a);\r\n\r\n        u3.addRankingToEnd(b);\r\n        u3.addRankingToEnd(c);\r\n        u3.addRankingToEnd(e);\r\n        u3.addRankingToEnd(a);\r\n        u3.addRankingToEnd(d);\r\n\r\n        u4.addRankingToEnd(b);\r\n        u4.addRankingToEnd(e);\r\n        u4.addRankingToEnd(c);\r\n        u4.addRankingToEnd(d);\r\n        u4.addRankingToEnd(a);\r\n\r\n        u5.addRankingToEnd(a);\r\n        u5.addRankingToEnd(c);\r\n        u5.addRankingToEnd(b);\r\n        u5.addRankingToEnd(e);\r\n        u5.addRankingToEnd(d);\r\n\r\n        List<Media> choices = new ArrayList<>();\r\n        choices.add(a);\r\n        choices.add(b);\r\n        choices.add(c);\r\n        choices.add(d);\r\n        choices.add(e);\r\n\r\n        b1.calcResult(choices);\r\n\r\n        assertEquals(\"Media Result\", b.getId(), t1.getResult().getFinalDecision().getId());\r\n\r\n    }\r\n\r\n    @Test\r\n    public void TestCalcResultSingleUser() {\r\n        Theatre t2 = new Theatre(\"1234\");\r\n        //BackStage b1 = t1.getBackstage();\r\n        BackStage b1 = new BackStage(t2);\r\n\r\n        Media a = new Media(\"A\");\r\n        Media b = new Media(\"B\");\r\n        Media c = new Media(\"C\");\r\n        Media d = new Media(\"D\");\r\n        Media e = new Media( \"E\");\r\n\r\n        User u1= new User(\"1\",\"1\", \"1\");\r\n\r\n        t2.addUser(u1);\r\n\r\n        u1.addRankingToEnd(c);\r\n        u1.addRankingToEnd(b);\r\n        u1.addRankingToEnd(a);\r\n        u1.addRankingToEnd(d);\r\n        u1.addRankingToEnd(e);\r\n\r\n        List<Media> choices = new ArrayList<>();\r\n        choices.add(a);\r\n        choices.add(b);\r\n        choices.add(c);\r\n        choices.add(d);\r\n        choices.add(e);\r\n\r\n        b1.calcResult(choices);\r\n\r\n        assertEquals(\"Media Result\", c.getId(), t2.getResult().getFinalDecision().getId());\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java	(revision e9d42ea40ae1fe35300774d71c3b255be8cf8522)
+++ app/src/test/java/com/example/whatdoyouwannawatch/BackStageUnitTest.java	(date 1607638961843)
@@ -33,8 +33,6 @@
         t1.setUsers(users);
 
         b1.calcLength();
-        assertEquals(u1t1, t1.getMinTime());
-        assertEquals(u2t2, t1.getMaxTime());
 
     }
 
